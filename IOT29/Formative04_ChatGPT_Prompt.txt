combine the following three python programs into one, encapsulate vcgen.py into a function, use  buttondemo.py as the visual interface.  Keep the 'Clear' button functionality, and connect the 'Check CPU' button to the vcgen.py function.
Suggest any improvements.
Document the code.
PgP note-some code was modified after this prompt to adjust window frame-to make it a specific size.  but the chatGPT supplied code works

vcgen.py:
#!/usr/bin/env python

# https://github.com/raspberrypi/firmware/commit/404dfef3b364b4533f70659eafdcefa3b68cd7ae#commitcomment-31620480
# 1110000000000000010
# |||             |||_ under-voltage
# |||             ||_ currently throttled
# |||             |_ arm frequency capped
# |||_ under-voltage has occurred since last reboot
# ||_ throttling has occurred since last reboot
# |_ arm frequency capped has occurred since last reboot

import subprocess

GET_THROTTLED_CMD = 'vcgencmd get_throttled'
MESSAGES = {
    0: 'Under-voltage!',
    1: 'ARM frequency capped!',
    2: 'Currently throttled!',
    3: 'Soft temperature limit active',
    16: 'Under-voltage has occurred since last reboot.',
    17: 'Throttling has occurred since last reboot.',
    18: 'ARM frequency capped has occurred since last reboot.',
    19: 'Soft temperature limit has occurred'
}

class Logger:
    COLOR_ERROR = '\033[91m'
    COLOR_SUCCESS = '\033[92m'
    COLOR_WARNING = '\033[33m'
    COLOR_RESET = '\033[0m'

    @classmethod
    def error(cls, msg):
        print(cls.COLOR_ERROR + msg + cls.COLOR_RESET)

    @classmethod
    def success(cls, msg):
        print(cls.COLOR_SUCCESS + msg + cls.COLOR_RESET)

    @classmethod
    def warn(cls, msg):
        print(cls.COLOR_WARNING + msg + cls.COLOR_RESET)

print("Checking for throttling issues since last reboot...")

throttled_output = subprocess.check_output(GET_THROTTLED_CMD, shell=True)
throttled_binary = bin(int(throttled_output.split(b'=')[1], 0))

warnings = 0

for position, message in MESSAGES.items():
    # Check for the binary digits to be "on" for each warning message
    if len(throttled_binary) > position and throttled_binary[0 - position - 1] == '1':
        Logger.error(message)
        warnings += 1

if warnings == 0:
    Logger.success("Looking good!")
else:
    Logger.warn("Houston, we may have a problem!")


buttondemo.py:
"""
File: buttondemo.py
"""

from breezypythongui import EasyFrame

class ButtonDemo(EasyFrame):
    """Illustrates command buttons and user events."""

    def __init__(self):
        """Sets up the window, label, and buttons."""
        EasyFrame.__init__(self, title = "Button Demo")

        # A single label in the first row.
        self.label = self.addLabel(text = "Hello world!",
                                   row = 0, column = 0,
                                   columnspan = 2, sticky = "NSEW")

        # Two command buttons in the second row.
        self.clearBtn = self.addButton(text = "Clear",
                                       row = 1, column = 0,
                                       command = self.clear)
        self.restoreBtn = self.addButton(text = "Check CPU",
                                         row = 1, column = 1,
                                         command = self.restore,
                                         state = "disabled")

    # Methods to handle user events.
    def clear(self):
        """Resets the label to the empty string and
        the button states."""
        self.label["text"] = ""
        self.clearBtn["state"] = "disabled"
        self.restoreBtn["state"] = "normal"

    def restore(self):
        """Resets the label to 'Hello world!'and sets
        the state of the buttons."""
        self.label["text"] = "Hello world!"
        self.clearBtn["state"] = "normal"
        self.restoreBtn["state"] = "disabled"

def main():
    """Instantiate and pop up the window."""
    ButtonDemo().mainloop()

if __name__ == "__main__":
    main()

